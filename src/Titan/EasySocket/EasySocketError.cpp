#include "EasySocket.h"

namespace WONMisc {
    auto EasySocket::WSAErrorToEnum(const int32_t theError) -> ES_ErrorType {
        switch (theError) {
            case NO_ERROR:
                return ES_NO_ERROR;
            case WSAEINTR:
                return ES_WSAEINTR;
            case WSAEBADF:
                return ES_WSAEBADF;
            case WSAEACCES:
                return ES_WSAEACCES;
            case WSAEFAULT:
                return ES_WSAEFAULT;
            case WSAEINVAL:
                return ES_WSAEINVAL;
            case WSAEMFILE:
                return ES_WSAEMFILE;
            case WSAEWOULDBLOCK:
                return ES_WSAEWOULDBLOCK;
            case WSAEINPROGRESS:
                return ES_WSAEINPROGRESS;
            case WSAEALREADY:
                return ES_WSAEALREADY;
            case WSAENOTSOCK:
                return ES_WSAENOTSOCK;
            case WSAEDESTADDRREQ:
                return ES_WSAEDESTADDRREQ;
            case WSAEMSGSIZE:
                return ES_WSAEMSGSIZE;
            case WSAEPROTOTYPE:
                return ES_WSAEPROTOTYPE;
            case WSAENOPROTOOPT:
                return ES_WSAENOPROTOOPT;
            case WSAEPROTONOSUPPORT:
                return ES_WSAEPROTONOSUPPORT;
            case WSAESOCKTNOSUPPORT:
                return ES_WSAESOCKTNOSUPPORT;
            case WSAEOPNOTSUPP:
                return ES_WSAEOPNOTSUPP;
            case WSAEPFNOSUPPORT:
                return ES_WSAEPFNOSUPPORT;
            case WSAEAFNOSUPPORT:
                return ES_WSAEAFNOSUPPORT;
            case WSAEADDRINUSE:
                return ES_WSAEADDRINUSE;
            case WSAEADDRNOTAVAIL:
                return ES_WSAEADDRNOTAVAIL;
            case WSAENETDOWN:
                return ES_WSAENETDOWN;
            case WSAENETUNREACH:
                return ES_WSAENETUNREACH;
            case WSAENETRESET:
                return ES_WSAENETRESET;
            case WSAECONNABORTED:
                return ES_WSAECONNABORTED;
            case WSAECONNRESET:
                return ES_WSAECONNRESET;
            case WSAENOBUFS:
                return ES_WSAENOBUFS;
            case WSAEISCONN:
                return ES_WSAEISCONN;
            case WSAENOTCONN:
                return ES_WSAENOTCONN;
            case WSAESHUTDOWN:
                return ES_WSAESHUTDOWN;
            case WSAETOOMANYREFS:
                return ES_WSAETOOMANYREFS;
            case WSAETIMEDOUT:
                return ES_WSAETIMEDOUT;
            case WSAECONNREFUSED:
                return ES_WSAECONNREFUSED;
            case WSAELOOP:
                return ES_WSAELOOP;
            case WSAENAMETOOLONG:
                return ES_WSAENAMETOOLONG;
            case WSAEHOSTDOWN:
                return ES_WSAEHOSTDOWN;
            case WSAEHOSTUNREACH:
                return ES_WSAEHOSTUNREACH;
            case WSAENOTEMPTY:
                return ES_WSAENOTEMPTY;
            case WSAEPROCLIM:
                return ES_WSAEPROCLIM;
            case WSAEUSERS:
                return ES_WSAEUSERS;
            case WSAEDQUOT:
                return ES_WSAEDQUOT;
            case WSAESTALE:
                return ES_WSAESTALE;
            case WSAEREMOTE:
                return ES_WSAEREMOTE;
            case WSASYSNOTREADY:
                return ES_WSASYSNOTREADY;
            case WSAVERNOTSUPPORTED:
                return ES_WSAVERNOTSUPPORTED;
            case WSANOTINITIALISED:
                return ES_WSANOTINITIALISED;
            case WSAEDISCON:
                return ES_WSAEDISCON;
            default:
                return ES_UNKNOWN_ERROR;
        }
    }

    auto ES_ErrorTypeToString(const ES_ErrorType theError) -> std::string {
        switch (theError) {
            case ES_NO_ERROR:
                return "ES_NO_ERROR";
            case ES_ERROR_NO_TYPE:
                return "ES_ERROR_NO_TYPE";
            case ES_INVALID_ADDR:
                return "ES_INVALID_ADDR";
            case ES_INVALID_SOCKET:
                return "ES_INVALID_SOCKET";
            case ES_INCOMPLETE_SEND:
                return "ES_INCOMPLETE_SEND";
            case ES_INCOMPLETE_RECV:
                return "ES_INCOMPLETE_RECV";
            case ES_DISCONNECTED:
                return "ES_DISCONNECTED";
            case ES_TMSG_TOO_LARGE:
                return "ES_TMSG_TOO_LARGE";
            case ES_WRONG_TSERVICE:
                return "ES_WRONG_TSERVICE";
            case ES_WRONG_TMESSAGE:
                return "ES_WRONG_TMESSAGE";
            case ES_INVALID_TMSG:
                return "ES_INVALID_TMSG";
            case ES_PARTIAL_SENDTO:
                return "ES_PARTIAL_SENDTO";
            case ES_TIMED_OUT:
                return "ES_TIMED_OUT";
            case ES_ERROR_STREAM_NOT_ALLOWED:
                return "ES_ERROR_STREAM_NOT_ALLOWED";
            case ES_ERROR_DATAGRAM_NOT_ALLOWED:
                return "ES_DATAGRAM_NOT_ALLOWED";
            case ES_SHUTDOWN:
                return "ES_SHUTDOWN";
            case ES_UNKNOWN_ERROR:
                return "ES_UNKNOWN_ERROR";
            case ES_UNEXPECTED_ENCRYPTED_MESSAGE:
                return "ES_UNEXPECTED_ENCRYPTED_MESSAGE";
            case ES_SESSIONID_MISMATCH:
                return "ES_SESSIONID_MISMATCH";
            case ES_DECRYPT_FAILURE:
                return "ES_DECRYPT_FAILURE";
            case ES_SEQUENCE_NUM_MISMATCH:
                return "ES_SEQUENCE_NUM_MISMATCH";
            case ES_GET_PUB_KEY_FAILURE:
                return "ES_GET_PUB_KEY_FAILURE";
            case ES_AUTH_INVALID_REPLY:
                return "ES_AUTH_INVALID_REPLY";
            case ES_NEED_CERTIFICATE:
                return "ES_NEED_CERTIFICATE";
            case ES_WSAEINTR:
                return "ES_WSAEINTR";
            case ES_WSAEBADF:
                return "ES_WSAEBADF";
            case ES_WSAEACCES:
                return "ES_WSAEACCES";
            case ES_WSAEFAULT:
                return "ES_WSAEFAULT";
            case ES_WSAEINVAL:
                return "ES_WSAEINVAL";
            case ES_WSAEMFILE:
                return "ES_WSAEMFILE";
            case ES_WSAEWOULDBLOCK:
                return "ES_WSAEWOULDBLOCK";
            case ES_WSAEINPROGRESS:
                return "ES_WSAEINPROGRESS";
            case ES_WSAEALREADY:
                return "ES_WSAEALREADY";
            case ES_WSAENOTSOCK:
                return "ES_WSAENOTSOCK";
            case ES_WSAEDESTADDRREQ:
                return "ES_WSAEDESTADDRREQ";
            case ES_WSAEMSGSIZE:
                return "ES_WSAEMSGSIZE";
            case ES_WSAEPROTOTYPE:
                return "ES_WSAEPROTOTYPE";
            case ES_WSAENOPROTOOPT:
                return "ES_WSAENOPROTOOPT";
            case ES_WSAEPROTONOSUPPORT:
                return "ES_WSAEPROTONOSUPPORT";
            case ES_WSAESOCKTNOSUPPORT:
                return "ES_WSAESOCKTNOSUPPORT";
            case ES_WSAEOPNOTSUPP:
                return "ES_WSAEOPNOTSUPP";
            case ES_WSAEPFNOSUPPORT:
                return "ES_WSAEPFNOSUPPORT";
            case ES_WSAEAFNOSUPPORT:
                return "ES_WSAEAFNOSUPPORT";
            case ES_WSAEADDRINUSE:
                return "ES_WSAEADDRINUSE";
            case ES_WSAEADDRNOTAVAIL:
                return "ES_WSAEADDRNOTAVAIL";
            case ES_WSAENETDOWN:
                return "ES_WSAENETDOWN";
            case ES_WSAENETUNREACH:
                return "ES_WSAENETUNREACH";
            case ES_WSAENETRESET:
                return "ES_WSAENETRESET";
            case ES_WSAECONNABORTED:
                return "ES_WSAECONNABORTED";
            case ES_WSAECONNRESET:
                return "ES_WSAECONNRESET";
            case ES_WSAENOBUFS:
                return "ES_WSAENOBUFS";
            case ES_WSAEISCONN:
                return "ES_WSAEISCONN";
            case ES_WSAENOTCONN:
                return "ES_WSAENOTCONN";
            case ES_WSAESHUTDOWN:
                return "ES_WSAESHUTDOWN";
            case ES_WSAETOOMANYREFS:
                return "ES_WSAETOOMANYREFS";
            case ES_WSAETIMEDOUT:
                return "ES_WSAETIMEDOUT";
            case ES_WSAECONNREFUSED:
                return "ES_WSAECONNREFUSED";
            case ES_WSAELOOP:
                return "ES_WSAELOOP";
            case ES_WSAENAMETOOLONG:
                return "ES_WSAENAMETOOLONG";
            case ES_WSAEHOSTDOWN:
                return "ES_WSAEHOSTDOWN";
            case ES_WSAEHOSTUNREACH:
                return "ES_WSAEHOSTUNREACH";
            case ES_WSAENOTEMPTY:
                return "ES_WSAENOTEMPTY";
            case ES_WSAEPROCLIM:
                return "ES_WSAEPROCLIM";
            case ES_WSAEUSERS:
                return "ES_WSAEUSERS";
            case ES_WSAEDQUOT:
                return "ES_WSAEDQUOT";
            case ES_WSAESTALE:
                return "ES_WSAESTALE";
            case ES_WSAEREMOTE:
                return "ES_WSAEREMOTE";
            case ES_WSASYSNOTREADY:
                return "ES_WSASYSNOTREADY";
            case ES_WSAVERNOTSUPPORTED:
                return "ES_WSAVERNOTSUPPORTED";
            case ES_WSANOTINITIALISED:
                return "ES_WSANOTINITIALISED";
            case ES_WSAEDISCON:
                return "ES_WSAEDISCON";
            case ES_StatusCommon_Failure:
                return "ES_StatusCommonFailure";
            case ES_StatusCommon_NotAvailable:
                return "ES_StatusCommon_NotAvailable";
            case ES_StatusCommon_NotAllowed:
                return "ES_StatusCommon_NotAllowed";
            case ES_StatusCommon_InvalidParameters:
                return "ES_StatusCommon_InvalidParameters";
            case ES_StatusCommon_AlreadyExists:
                return "ES_StatusCommon_AlreadyExists";
            case ES_StatusCommon_MessageExceedsMax:
                return "ES_StatusCommon_MessageExceedsMax";
            case ES_StatusCommon_InvalidMessage:
                return "ES_StatusCommon_InvalidMessage";
            case ES_StatusCommon_NotAuthorized:
                return "ES_StatusCommon_NotAuthorized";
            case ES_StatusCommon_ResourcesLow:
                return "ES_StatusCommon_ResourcesLow";
            case ES_StatusCommon_NoPortAvailable:
                return "ES_StatusCommon_NoPortAvailable";
            case ES_StatusCommon_TimedOut:
                return "ES_StatusCommon_TimedOut";
            case ES_StatusCommon_NotSupported:
                return "ES_StatusCommon_NotSupported";
            case ES_StatusCommon_DecryptionFailed:
                return "ES_StatusCommon_DecryptionFailed";
            case ES_StatusCommon_InvalidSessionId:
                return "ES_StatusCommon_InvalidSessionId";
            case ES_StatusCommon_InvalidSequenceNumber:
                return "ES_StatusCommon_InvalidSequenceNumber";
            case ES_StatusAuth_ExpiredKey:
                return "ES_StatusAuth_ExpiredKey";
            case ES_StatusAuth_VerifyFailed:
                return "ES_StatusAuth_VerifyFailed";
            case ES_StatusAuth_LockedOut:
                return "ES_StatusAuth_LockedOut";
            case ES_StatusAuth_KeyInUse:
                return "ES_StatusAuth_KeyInUse";
            case ES_StatusAuth_CRCFailed:
                return "ES_StatusAuth_CRCFailed";
            case ES_StatusAuth_UserExists:
                return "ES_StatusAuth_UserExists";
            case ES_StatusAuth_UserNotFound:
                return "ES_StatusAuth_UserNotFound";
            case ES_StatusAuth_BadPassword:
                return "ES_StatusAuth_BadPassword";
            case ES_StatusAuth_DirtyWord:
                return "ES_StatusAuth_DirtyWord";
            case ES_StatusAuth_InvalidName:
                return "ES_StatusAuth_InvalidName";
            case ES_StatusAuthFailureEnd:
                return "ES_StatusAuthFailureEnd";
            default:
                return "ES_UNKNOWN_ERROR";
        }
    }
}
